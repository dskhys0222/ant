import { render } from "@testing-library/react";
import { describe, expect, test, vi } from "vitest";
import RootLayout, { metadata } from "./layout";

// モックデータ
vi.mock("next/font/google", () => ({
  Geist: () => ({
    variable: "mocked-geist-sans-variable",
  }),
  Geist_Mono: () => ({
    variable: "mocked-geist-mono-variable",
  }),
}));

describe("RootLayoutコンポーネント", () => {
  test("子要素が正しくレンダリングされる", () => {
    const { getByTestId } = render(
      <RootLayout>
        <div data-testid="child">テストコンテンツ</div>
      </RootLayout>,
    );

    // 子要素が正しくレンダリングされていることを確認
    expect(getByTestId("child")).toHaveTextContent("テストコンテンツ");
  });

  test("フォント変数のクラス属性を持つ", () => {
    const { container } = render(
      <RootLayout>
        <div>テストコンテンツ</div>
      </RootLayout>,
    );

    // className が適切に設定されていることを確認
    // Note: Testing Library ではルート要素の外側（html/body）は検証できないので
    // レンダリングに成功すること自体をテスト
    expect(container.firstChild).not.toBeNull();
  });

  test("html要素がレンダリングされる", () => {
    const { container } = render(
      <RootLayout>
        <div data-testid="child">テストコンテンツ</div>
      </RootLayout>,
    );

    // Happy DOM環境ではhtml要素は直接テストできないため、コンポーネントが
    // エラーなくレンダリングされることを確認
    expect(container.firstChild).not.toBeNull();
  });
});

// メタデータのテスト
describe("メタデータ", () => {
  test("正しいタイトルと説明を持つ", () => {
    expect(metadata.title).toBe("Create Next App");
    expect(metadata.description).toBe("Generated by create next app");
  });
});
